spring事物传播模式：
1、required：业务方法运行时，如果有事物加入这个事物,否者新建事物
2、not_support：声明方法不需要事物，容器默认不开启事物，如果方法在一个事物中被调用，该事物挂起，调用结束，原事物恢复
3、requirenew：不管是否存在事物，都会发起一个新事物，如果方法已经运行在事物中，则原事物挂起创建新事物。
4、mandatory(强制的):只能在一个已存在的事物中执行，不能发起自己的事物，如果在没有事物的环境下别调用，抛异常
5、support：在事物范围内调用，成为该事物的一部分。在事物外被调用，则在没有事物的环境下被调用。
6、never：不能再事物中被调用，否者报错
7、nested：如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。


事物的隔离级别
spring本身没有事物，所有的事物操作是基于数据库的
没有隔离级别可能发生这么几种情况：
脏读：一个事物读取到另一个事物未提交的数据
不可重复读：一个事物内多次查询返回不同的数据结果(不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据)
幻读：一个事物读取到别的事物插入的数据，导致前后不一致

解决上面的情况，使用不同的隔离级别。

1、Serializable ：最严格的级别，事务串行执行，资源消耗最大；
2、REPEATABLE READ ：保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但是带来了更多的性能损失。
3、READ COMMITTED :大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”。该级别适用于大多数系统。
4、Read Uncommitted ：保证了读取过程中不会读取到非法数据。


@Transactional失效
1、如果方法不是public会失效
2、如果异常是check默认也不会滚，如果想check异常回归，注解上面写明异常类型（Spring事务管理只对出现运行期异常进行回滚）
3、数据库引擎要支持事物，如mysql 注意如果是myisam事物是不起作用的
4、是否开启了对注解的解析
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
5、spring 是否扫描到这个包


核心机制分析

设计模式：
   工厂模式：private static final Protocol protocol =
			ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
			Dubbo 里有很多这种代码。这也是一种工厂模式，只是实现类的获取采用了 jdkspi 的机
			制。这么实现的优点是可扩展性强，想要扩展实现，只需要在 classpath 下增加个文件就可
			以了，代码零侵入。另外，像上面的 Adaptive 实现，可以做到调用时动态决定调用哪个实
			现，但是由于这种实现采用了动态代理，会造成代码调试比较麻烦，需要分析出实际调用的
			实现类。
   观察者模式：cusumer在订阅服务时，实现notifyListener，开启listener注册中心会每 5 秒定时检查是否有服
				务更新，如果有更新，向该服务的提供者发送一个 notify 消息， provider 接受到 notify 消息
				后，即运行 NotifyListener 的 notify 方法，执行监听器方法。
   动态代理模式：
			   Dubbo 扩展 jdkspi 的类 ExtensionLoader 的 Adaptive 实现是典型的动态代理实现。 Dubbo
			需要灵活地控制实现类，即在调用阶段动态地根据参数决定调用哪个实现类，所以采用先生
			成代理类的方法，能够做到灵活的调用。生成代理类的代码是 ExtensionLoader 的
			createAdaptiveExtensionClassCode 方法。代理类的主要逻辑是，获取 URL 参数中指定参数的
			值作为获取实现类的 key


bean加载
扩展点机制
动态代理
远程调用

