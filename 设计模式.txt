代理模式
对目标对象提供另外一种访问方式，即通过代理对象访问目标对象，这样做的好处在于，在不修改目标对象的前提下实现对目标对象的扩展，在实际开发者可以通过不修改他人代码的基础上达到修改和扩展的目的

     静态代理：定义一个接口或父类，目标类和代理类需要实现同一个接口或继承同一个父类
     缺点：一旦修改接口，目标对象、代理对象都要维护

     动态代理：代理对象不需要实现接口、代理对象的生成是利用JDK的API动态的在内存中构建的，也叫jdk代理、接口代理，通过实现InvocationHandler编写一个动态代理器，

     cglib代理：静态代理、动态代理都需要目标对象实现接口，但有时候对象是没有实现接口的，所以可以通过对目标对象子类的方式实现代理，这种方法叫cglib代理，在spring的AOP中cglib代理实现拦截，通过非常底层的字节码技术，为一个类创建子类，在子类中通方法拦截技术，植入横向逻辑。JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。




适配器模式：因为某些需求导致老的接口不适用，在不修改原有接口的情况下，将接口转化为可用接口。就是保留现有现有类的服务，满足客户的需求
           类适配器模式：当我们要访问接口A中没有我们想要的方法，在B接口中发现了，但是有不能改变对A接口的访问，所有需要定义一个P匹配器，P实现A接口继承B接口的实现类BB 这样的话可以即不改变对A接口的使用也可以用到B接口的发方法。

           对象适配器模式：和上面的场景一下，定义一个适配器P之后，P实现A接口，在P中定义一个B类型的变量C，通过构造函数对C赋值，在接口A的实现方法中通过C调用B的方法来实现。

           接口适配器模式：接口中有很多方法，但是只需要使用其中的一个或一部分，需要通过抽象类继承接口，再通过实现类来继承抽象类，可以只实现需要的方法。

https://www.cnblogs.com/V1haoge/p/6479118.html           


装饰模式：动态的给对象附加上一些功能。将对象的功能加以扩展。

http://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html


几种模式的区别：
适配器模式，一个适配允许通常因为接口不兼容而不能在一起工作的类工作在一起，做法是将自己的接口包裹在一个已存在的类中。
装饰器模式，原有的不能满足现有的需求，对原有的进行增强。
代理模式，同一个类而去调用另一个类的方法，不对这个方法进行直接操作
代理和装饰：代理主要是代码的隔离、装饰一般是加强功能    
     

工厂模式
  简单工厂模式：客户端不用关心对象创建的过程，只要告诉工厂创建什么，工厂会负责不同对象的创建
  工厂方法模式：是简单工厂模式的延伸。在工厂方法模式中，核心工厂不再负责工厂创建，将具体的创建工作交给子类完成。也就是核心工厂类仅仅提供创建接口，具体实现方法交给继承它的子类去完成。当我们的系统需要增加其他新的对象时，我们只需要添加一个具体的产品和它的创建工厂即可，不需要对原工厂进行任何修改，这样很好地符合了“开闭原则”。


观察者模式
  是对象的行为模式，又叫发布订阅模式，定义了一种一对多的依赖关系，多个订阅者订阅一个主题，当主题发生改变，会通知所有订阅者，使他们自动更新自己。
  使用场景：一个动作发生时，会引发一系列的动作。如：银行里多次密码错误会导致卡被吞，然后会引发摄像头连拍、通知监控系统、初始化ATM机屏幕，返回最初状态
   

模板模式：
    在不改变模板结构的前提下，在子类中重新定义模板的内容
    解决问题：将相同的代码放到父类中，将不同的代码放到子类中，提高了代码的复用性,符合开闭原则

       
生产者消费者模式
    解决了生产者和消费者之间的耦合关系，生产者消费者之间不直接通信，通过通过阻塞队列通信的，所以生成这产生的数据不用等待消费者消费之间放入阻塞队列中，消费者也不需要找生产者要数据，直接从阻塞队列中取就好了，阻塞队列相当于一个缓冲区，平衡了二者之间的关系。


策略模式
针对一组算法，将每一个算法封装到具有公共接口的独立类中，使之可以相互替换，使算法在不影响客户端的情况下发生变化。
使用场景：对不同的业务，使用不同的处理手段

