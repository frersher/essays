代理模式
对目标对象提供另外一种访问方式，即通过代理对象访问目标对象，这样做的好处在于，在不修改目标对象的前提下实现对目标对象的扩展，在实际开发者可以通过不修改他人代码的基础上达到修改和扩展的目的

     静态代理：定义一个接扣或父类，目标类和代理类需要实现同一个接口或继承同一个父类
     缺点：一旦修改接口，目标对象、代理对象都要维护

     动态代理：代理对象不需要实现接口、代理对象的生成是利用JDK的API动态的在内存中构建的，也叫jdk代理、接口代理

     cglib代理：静态代理、动态代理都需要目标对象实现接口，但有时候对象是没有实现接口的，所以可以通过对目标对象子类的方式实现代理，这种方法叫cglib代理，在spring的AOP中cglib代理实现拦截
     

工厂模式
  简单工厂模式：客户端不用关心对象创建的过程，只要告诉工厂创建什么，工厂会负责不同对象的创建
  工厂方法模式：是简单工厂模式的延伸。在工厂方法模式中，核心工厂不再负责工厂创建，将具体的创建工作交给子类完成。也就是核心工厂类仅仅提供创建接口，具体实现方法交给继承它的子类去完成。当我们的系统需要增加其他新的对象时，我们只需要添加一个具体的产品和它的创建工厂即可，不需要对原工厂进行任何修改，这样很好地符合了“开闭原则”。


